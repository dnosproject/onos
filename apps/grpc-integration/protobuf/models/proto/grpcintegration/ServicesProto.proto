syntax = "proto3";
option java_package = "org.onosproject.grpc.grpcintegration.models";

package grpcintegration;

import "apps/grpc-integration/protobuf/models/proto/net/packet/OutboundPacketProto.proto";
import "apps/grpc-integration/protobuf/models/proto/net/flow/FlowRuleProto.proto";
import "apps/grpc-integration/protobuf/models/proto/net/topology/TopologyGraphProto.proto";
import "apps/grpc-integration/protobuf/models/proto/net/topology/TopologyProto.proto";
import "apps/grpc-integration/protobuf/models/proto/grpcintegration/EventNotificationProto.proto";
import "apps/grpc-integration/protobuf/models/proto/grpcintegration/StatusProto.proto";
import "apps/grpc-integration/protobuf/models/proto/grpcintegration/ControlMessagesProto.proto";
import "apps/grpc-integration/protobuf/models/proto/net/HostProto.proto";
import "apps/grpc-integration/protobuf/models/proto/net/HostIdProto.proto";


// Corresponds to PacketOut service
service PacketOutService {
    rpc emit (net.packet.OutboundPacketProto) returns (PacketOutStatus);
}

// Corresponds to FlowRule service
service FlowService {
    rpc addFlow (net.flow.FlowRuleProto) returns (FlowServiceStatus);
    rpc removeFlow (net.flow.FlowRuleProto) returns (FlowServiceStatus);
}

// Corresponds to Topology service
service TopoService {
    rpc getGraph (Empty) returns (net.topology.TopologyGraphProto);
    rpc currentTopology (Empty) returns (net.topology.TopologyProto);
    rpc getPaths (getPathRequest) returns (Paths);
}

// Corrsponds to Host Service
service HostService {
    rpc getHosts (Empty) returns (Hosts);
    rpc getHostCount (Empty) returns (HostCountProto);
    rpc getHost (net.HostIdProto) returns (net.HostProto);

}

// Corresponds to Device Service
service DeviceService {

}

// Corresponds to Core Service
service CoreService {

}

// Corresponds to EventNotification service
service EventNotification {
    rpc register (RegistrationRequest) returns (RegistrationResponse);
    rpc onEvent (Topic) returns (stream Notification);
}




